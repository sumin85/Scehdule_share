name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: scheduleshare-githubaction-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: scheduleshare-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: scheduleshare-codedeploy-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v4

    # (2) JDK 17 세팅 (프로젝트에서 Java 17 사용)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    # (3) Node.js 20 설정 (Firebase 호환성을 위해)
    - name: Set up Node.js 20
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    # (4) Node.js 의존성 캐시
    - name: Cache Node.js dependencies
      uses: actions/cache@v3
      with:
        path: |
          frontend/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles('frontend/package.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    # (5) React 빌드
    - name: Build React frontend
      run: |
        cd frontend
        npm install
        CI=false npm run build

    # (6) React 빌드 파일을 Spring Boot static 폴더로 복사
    - name: Copy React build to Spring Boot
      run: |
        rm -rf demo/src/main/resources/static/*
        cp -r frontend/build/* demo/src/main/resources/static/

    # (7) Gradle build (Test 제외)
    - name: Build with Gradle
      run: |
        cd demo
        chmod +x gradlew
        ./gradlew clean bootJar -x test

    # (8) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (9) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://${{ env.S3_BUCKET_NAME }}/${{ github.sha }}.zip \
          --source .

    # (10) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=${{ env.S3_BUCKET_NAME }},key=${{ github.sha }}.zip,bundleType=zip